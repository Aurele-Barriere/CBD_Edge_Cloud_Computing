================================================================================

Edge-Centric Computing : Vision and Challenges

Need for a new shift towards decentralization.
Social computing.
Lack of trust in centralized systems.
2 waves. edge : lots of individual machines.
         core : cloud

Problems with centralization:
	 loss of privacy
	 requires trust
	 unused personal devices (lots of computing power)

Proposition : keep data centers and cloud at the core.
But around it, smaller web servers : next layer.
Edge : individual human-controlled devices (computers, tablets, routers).

In edge computing:
proximity in the edge: (P2P, CDNs)
intelligence in the edge: autonomous decision making
trust in the edge: personal data stays in the edge
control in the edge: management of applications comes from the edge
humans in the edge: users have control on their information

Combine P2P and cloud. Cloud could provide stable data when necessary.
[10] confirms the performance of such hybrid systems.
peer ressources to build nano datacenters.

Fog Computing. Same but less focused on human-driven applications controlled from the edge.

including humans in data-analysis loops. Users acting as sensors. How to respect user privacy in this case.
The answer of edge-centric cloud computing is to not aggegate the datas.

Find correct tradeoff between mobile terminals and cloud servers.
Interconnects several clouds.
Difference for privacy : we can assume that the edge can be trusted.
Scalability must still be dealt with. However, the cloud provides more stable data.

You could decide which data is accessible to third party applications.
Trust in users may establish links between them...
Users won't have to deal with system administration.
Compromised servers may not induce leak of private data.
Geographical proximity may play a role.
Support for mobility.

================================================================================

Edge computing: Vision and Challenges

Processing the data at the edge of the network.
IoT.
Large data, fast response-time needed, private data. Cloud might not be sufficient.

Data is more and more produced at the edge. Thus, more efficient to process at the edge. Cloud computing is not efficient for these systems.

When large data is produced at the edge, speed of data transportation becomes the bottleneck. Example of Boeing. Cloud introduces long response-time, regardless of the computing power of the cloud.

So much data by IoT that it must be consumed at the edge wwithout being sent to the cloud. Cloud not suited for IoT.
Processing in the edge also protects privacy (health sensors).
Difference with fog computing : focus more on the things, less on the infrastructure.

We could cache data and operations on the data at the edge.
Example: online shopping. Cart manipulation should be done at the edge. Less latency. Synchronization with the cloud happens in the background, without introducing latency.

Moving between edges -> caching in multiple edges.

Example: fast video analysis. Missing child.
Examples: smart home. smart city. hospitals.

Harder to write applications that run on heterogeneous platforms.
Proposition: computing stream. serial of functions to be applied to the data.
We would also need a naming convention. IP could be too heavy.
Human involvment should be minimized.
Isolation issue.
Maintain topology to have failure detection.

Filtering data (errors). Critical analysis.

Workload allocation. Which layer should work? Define metrics. For instance Latency, Bandwidth, Energy, Cost.

================================================================================

Bringing the Cloud to the Edge

Service nodes placed at the cloud's edge.
Two trends : cloud and mobile computing.
IoT.
Huge data created at the edge.
Cloud backend needed for performance, but low latency needed for some applications.
Split cloud application architecture.
Local networks where the users are.
In case of failure/miss, go back to the centralized servers.
Edge Zones (potentially NATed)  (mobility?)
Edge Apps designed to be deployed both in the cloud and at the edges.
Edge cloud implementation on top of OpenStack. IaaS.
Example: 3D indoor ocalization. Needs computation power. Local.
Experiments results.
Other Example: Video Surveillance. Bandwidth optimization.
Different from Nanodatacenters and cloudlets where they bring the cloud to the edges.

================================================================================

A hybrid edge-cloud architecture for reducing on-demand gaming latency

We want cloud to be useful in low-latency situations (such as multimedia applications).
Cloud alone does not work in interactive applications. They require specialized hardware (GPU).
Focus on on-demand gaming.
Compute remotely then sends a video stream.
Some datacenters can already provide low-latency streams. But the user coverage is not complete.
We could add edge servers to greatly increase user coverage. But they have physical limitations.
Other games/applications can tolerate more latency.
Hard to estimate peak number of players.
Try to optimize parameters to have lowest latency or better coverage. Game placement uses game popularity.
Edge-only deployment requires too much edge sites and edge servers.
-> Towards hybrid infrastructure.
Facility location problem (NP hard).
Various heuristics.
Voting based is more efficient for game placement.

================================================================================

Fog Computing: A Platform for Internet of Things and Analytics

There are several advantages for aggregating in big data-centers.
Issues:
Low-latency applications,
Geo-distributed (environment monitoring),
Fast mobile applications (smart vehicles),
3/4 billions of end points. Humans behind them.

Use case: Smart Traffic Light System
Local latency.
Orchestration platform.
Communicates with the Cloud data to be analyzed.

Use case: Wind Farm
Real-time analytics and batch analytics.
Interactions sensors/actuators.

Geo-distribution calls for computation at the edge.
Cooperation between Edge and Core. Analytics can be made on different ranges of time : from milliseconds to month.

Several tenants. More heterogeneous. -> Fog abstraction layer to hide platform heterogeneity.
Monitors ressource utilisation. Virtualization.

Foglets agents to monitor every node.
Distributed database.
Policy-based service orchestration.

================================================================================